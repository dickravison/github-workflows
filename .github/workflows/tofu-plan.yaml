name: Validate and Plan Tofu

on:
  workflow_call:
    inputs:
      env:
        description: 'The env to run this in.'
        default: 'dev'
        required: false
        type: string
      tf_root:
        description: 'The root directory containing the Tofu code.'
        default: './tf'
        required: false
        type: string
      tf_version:
        description: 'The Tofu version to use.'
        default: '1.8.5'
        required: false
        type: string
      runner:
        description: 'The type of runner to use.'
        default: 'ubuntu-latest'
        required: false
        type: string
      aws_session:
        description: 'The name of the session when GitHub assumes the AWS role.'
        required: true
        type: string
      checkov_soft_fail:
        description: 'Set to true to stop checkov errors from failing the workflow.'
        default: 'false'
        required: false
        type: string

jobs:
  plan:
    name: Plan
    needs: lint
    runs-on: ${{ inputs.runner }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out code
        uses: actions/checkout@v4.1.7

      - name: Setup Tofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ inputs.tf_version }}

      - name: Set role
        id: set-deploy-role
        run: |
          if [ ${{ inputs.env }} == 'dev' ]; then
            role_arn="${{ secrets.DEV_DEPLOY_ROLE }}"
          elif [ ${{ inputs.env }} == 'prd' ]; then
            role_arn="${{ secrets.PRD_DEPLOY_ROLE }}"
          fi
          echo "role_arn=$role_arn" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: eu-west-1
          role-to-assume: ${{ steps.set-deploy-role.outputs.role_arn }}
          role-session-name: ${{ inputs.aws_session }}

      - name: Run Tofu Init
        id: init
        working-directory: ${{ inputs.tf_root }}
        run: tofu init -backend-config="./env/${{ inputs.env }}.hcl"

      - name: Tofu Plan
        id: plan
        working-directory: ${{ inputs.tf_root }}
        run: tofu plan -var-file="./env/${{ inputs.env }}.tfvars" -no-color -out tf.plan
